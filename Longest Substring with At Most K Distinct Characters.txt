public class Solution {
    /**
     * @param s: A string
     * @param k: An integer
     * @return: An integer
     */
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        HashMap<Character, Integer> memo = new HashMap<>();
        int distinct = 0; 
        int release = 0;
        int answer = 0;

        for(int acquire = 0; acquire < s.length(); acquire++){
            Character currentChar = s.charAt(acquire);

            if(memo.containsKey(currentChar)){
                memo.put(currentChar, memo.get(currentChar) + 1);
            } else {
                memo.put(currentChar, 1);
                distinct += 1;
            }

            while(release <= acquire && distinct > k){
                Character disChar = s.charAt(release);
                memo.put(disChar, memo.get(disChar) - 1);
                release += 1;

                if(memo.get(disChar) == 0){
                    memo.remove(disChar);
                    distinct -= 1;
                }
            }
            answer = Math.max(answer, acquire - release + 1);
        }
        return answer;
    }
}