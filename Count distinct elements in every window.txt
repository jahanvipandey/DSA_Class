class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        ArrayList<Integer> answer = new ArrayList<>();
        HashMap<Integer, Integer> memo = new HashMap<>();
        int distinct = 0;
        
        for(int i = 0; i < k; i++){
            int currentkey = A[i];
            
            if(memo.containsKey(currentkey)){
                memo.put(currentkey, memo.get(currentkey)+1);
            } else {
                memo.put(currentkey, 1);
                distinct += 1;
            }
        }        
        answer.add(distinct);
        
        int release = 0;
        
        for(int aquire = k; aquire < n; aquire++){
            int discard = A[release];
            memo.put(discard, memo.get(discard)-1);
            release += 1;
            
            if(memo.get(discard) == 0){
                memo.remove(discard);
                distinct -=1;
            }
            
            int currentKey = A[aquire];
            if(memo.containsKey(currentKey)){
                memo.put(currentKey, memo.get(currentKey)+1);
            } else {
                memo.put(currentKey, 1);
                distinct += 1;
            }
            answer.add(distinct);
        }
        
        return answer;
    }
}

